/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFlagDefinitionArgs } from "./CreateFlagDefinitionArgs";
import { UpdateFlagDefinitionArgs } from "./UpdateFlagDefinitionArgs";
import { DeleteFlagDefinitionArgs } from "./DeleteFlagDefinitionArgs";
import { FlagDefinitionFindManyArgs } from "./FlagDefinitionFindManyArgs";
import { FlagDefinitionFindUniqueArgs } from "./FlagDefinitionFindUniqueArgs";
import { FlagDefinition } from "./FlagDefinition";
import { FlagConfigurationFindManyArgs } from "../../flagConfiguration/base/FlagConfigurationFindManyArgs";
import { FlagConfiguration } from "../../flagConfiguration/base/FlagConfiguration";
import { Project } from "../../project/base/Project";
import { FlagDefinitionService } from "../flagDefinition.service";

@graphql.Resolver(() => FlagDefinition)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FlagDefinitionResolverBase {
  constructor(
    protected readonly service: FlagDefinitionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FlagDefinition",
    action: "read",
    possession: "any",
  })
  async _flagDefinitionsMeta(
    @graphql.Args() args: FlagDefinitionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FlagDefinition])
  @nestAccessControl.UseRoles({
    resource: "FlagDefinition",
    action: "read",
    possession: "any",
  })
  async flagDefinitions(
    @graphql.Args() args: FlagDefinitionFindManyArgs
  ): Promise<FlagDefinition[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FlagDefinition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FlagDefinition",
    action: "read",
    possession: "own",
  })
  async flagDefinition(
    @graphql.Args() args: FlagDefinitionFindUniqueArgs
  ): Promise<FlagDefinition | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FlagDefinition)
  @nestAccessControl.UseRoles({
    resource: "FlagDefinition",
    action: "create",
    possession: "any",
  })
  async createFlagDefinition(
    @graphql.Args() args: CreateFlagDefinitionArgs
  ): Promise<FlagDefinition> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        project: {
          connect: args.data.project,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FlagDefinition)
  @nestAccessControl.UseRoles({
    resource: "FlagDefinition",
    action: "update",
    possession: "any",
  })
  async updateFlagDefinition(
    @graphql.Args() args: UpdateFlagDefinitionArgs
  ): Promise<FlagDefinition | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          project: {
            connect: args.data.project,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FlagDefinition)
  @nestAccessControl.UseRoles({
    resource: "FlagDefinition",
    action: "delete",
    possession: "any",
  })
  async deleteFlagDefinition(
    @graphql.Args() args: DeleteFlagDefinitionArgs
  ): Promise<FlagDefinition | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FlagConfiguration])
  @nestAccessControl.UseRoles({
    resource: "FlagConfiguration",
    action: "read",
    possession: "any",
  })
  async flagConfigurations(
    @graphql.Parent() parent: FlagDefinition,
    @graphql.Args() args: FlagConfigurationFindManyArgs
  ): Promise<FlagConfiguration[]> {
    const results = await this.service.findFlagConfigurations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async project(
    @graphql.Parent() parent: FlagDefinition
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
